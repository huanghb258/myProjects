###a 阮一峰 CORS详解： https://www.cnblogs.com/lxwphp/p/8080188.html;
###a Ajax跨域文章： http://www.ruanyifeng.com/blog/2016/04/cors.html;


同源策略：
	http://	  www.		abc.com		:8080		/scripts/jquery.js
	协议	 子域名		 主域名		端口号		 请求资源地址


注意：协议或端口造成的跨域问题前端是不能解决的

同源策略限制的内容：
	1.cookie/localStorage等存储性内容
	2.DOM节点	但是img/link/script标签允许
	3.AJAX请求不能发送
	
		

一、JSONP:
	缺点：仅支持get请求
	1.<script src='http://www.baidu.com/data.php?callback=xx'></script>	//动态生成
		
	2.function xx(result){//result就是服务端返回的数据}

	使用jquery：	
		1.$.getJSON('http://www.baidu.com/data.php?callback=?',function(r){..})

		2.$.ajax({})	...


二、CORS:
	cors要求浏览器（>ie10）和服务器同时支持，是跨域的根本解决方法。
	
	由服务器设置,例express里的：
	// app.all('*', function(req, res, next) {
	//     res.header("Access-Control-Allow-Origin", "*");
	//     res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
	//     res.header("Access-Control-Allow-Headers", "X-Requested-With");
	//     res.header('Access-Control-Allow-Headers', 'Content-Type');
	//     next();
	// });

三、webSocket:
	需服务端配合：
	websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信。
	服务端：		
		npm install socket.io --save	//安装

			//可以直接写express框架下www里
		var socketPackage = require('socket.io'); //引入包
		var io = socketPackage(server); //生成socket.IO 实例对象，依赖http server 
			
		//socket连接
		io.on( "connection", function( socket ){
		    console.log( "一个新连接" );
		    socket.emit('msg', '欢迎来到xxx');

		    socket.on('msg', function (data) {
		        console.log(data);
		        var answer = findAnswer(data);	//findAnswer是自定义的逻辑函数
		        if(null !== answer){
		            socket.emit('msg', answer);
		        }else {
		            socket.emit('msg', data);
		        }
		    });
		});
		
		

		
	前端代码：
	<script src="./socket.io.js">//原生webSocket API不好用，使用Socket.io
	var socket = io('http://www.domain2.com:8080');
		// 连接成功处理
	socket.on('connect',function(){    
		// 监听服务端消息
    	socket.on('message', function(msg) {
        	console.log('data from server: ---> ' + msg); 
    	});
 
	
		


2.修改domain方法：
	适用于iframe主机名不同但主域相同的情况下
	
	获取iframe里的window对象：win=document.getElementById('iframe').contentWindow;	

	方法：documetn.domain='example.com'	//载入的页面也要设置
	
	如果你想通过ajax的方法去与不同子域的页面交互，除了使用jsonp的方法外，还可以用一个隐藏的iframe来
	做一个代理。原理就是让这个iframe载入一个与你想要通过ajax获取数据的目标页面处在相同的域的页面，
	所以这个iframe中的页面是可以正常使用ajax去获取你要的数据的

3.使用window.name来进行跨域
	在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的
	即浏览器没关闭，所有页面的window.name值都是一样的

	例：a.html 
		window.name='我是a页面设置的值'
		window.location='b.html'
	    b.html
		alert(window.name)	//弹出'我是a页面设置的值'

	大致过程：www.example.com/a.html页面想要获得www.cnblogs.com/data.html里的数据
		1.data.html设置window.name
		2.a.html使用一个隐藏的iframe,src=data.html
		3.此时因为同源策略，仍不能直接得到，a页面还要做如下设置
		function getData(){
			var iframe=$('#iframe');
			iframe.onload=function(){
				var data=iframe.contentWindow.name;
				alert(data);
			}
			iframe.src='b.html'
		}
		<iframe id='iframe' src='http://www.cnblogs.com/data.html' onload='getData'></iframe>

	现在封装好的：..





4.HTML5 window.postMessage方法：
	window.postMessage(message,targetOrigin);	//参数1只能为字符串
	//参数1为要发送的消息,参数2限定接收消息的那个window对象所在的域,不限定设为*

	例：
	说明：
	  1.e.data即是传过来的值
	  2.xx.postMessage():理解为传数据，xx可以是iframe,也可以是iframe.parent(即本例的b.html)		
	  3.onmessage是监听，理解为获取数据，实时的数据(如开始得到的是'你',后面重新传'好',最终
		e.data自动变为'好')
	127.0.0.1:8080/b.html下：
	   <div id='d1'> b页面原始内容</div> 
	   <iframe id='frm' src='http://192.168.1.3:8080/c.html'>			
           window.onload=function(){
             window.frames[0].postMessage('b页面传给c的参数','http://192.168.1.3:8080');//传值给c
	     window.addEventListener('message',function(e){  //监听c返回的数据     
	             d1.innerHTML=e.data; //得到iframe传过来的值
	        },false);
          }
		
	192.168.1.3:8080/c.html
		<input id="input" value="c页面"> 
		<button onclick="change()">改变input的值</button>
		window.onload=function(){	        	
			window.addEventListener('message',function(e){            	
                		if(e.source!=window.parent) return;//判断一下比较好               		
                		input.value=e.data;
           		 },false);
        	} 
		function change() {
        		input.value=input.value=='改变后'?'6666':'改变后';
        		window.parent.postMessage(input.value,'*');
        	}




