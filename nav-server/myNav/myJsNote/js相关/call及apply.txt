小技巧：
	利用apply打散功能及Math.min()计算一个数组中最小值：Math.min.apply(null,arr);
	//Math.min不接受数组作为参数，只接受散数，如：Math.min(7,6,9)

.call语法：
	.call(代替对象，参数);	例：a.call(b);  把b方法替换成a

	例1：
	function add(a,b) {  alert(a+b); }  
	function sub(a,b) { alert(a-b);}  
	add.call(sub,3,1); //== add(3,1) 输出4
	

	例2:
	function Animal(){ 
	this.name = "Animal";    
    	this.showName = function(){    
        	alert(this.name);    
    		}    
	}    
  
	function Cat(){    
    	this.name = "Cat";    
	}  
	var animal = new Animal();    
	var cat = new Cat();  
	//通过call或apply方法，将原本属于Animal对象的showName()方法交给对象cat来使用了。    
	//输入结果为"Cat"    
	animal.showName.call(cat,",");    
	//animal.showName.apply(cat,[]);  

	例3：实现继承
		function Animal(name){      
    		  this.name = name;      
    		  this.showName = function(){      
        	  alert(this.name);      
    		  }      
		}      
    
		function Cat(name){    
    		Animal.call(this, name);    
		}      
    
	var cat = new Cat("Black Cat");     
	cat.showName();  
 	Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么 Cat中不就有Animal的所有属性和方法了吗，Cat对象就能够直接调用Animal的方法以及属性了.


	例4：多重继承
	function Class10()  
	{  
    	  this.showSub = function(a,b)  
    	  {  
            alert(a-b);  
    	  }  
	}  
  
	function Class11()  
	{  
    	  this.showAdd = function(a,b)  
    	 {  
           alert(a+b);  
    	 }  
	}  
  
	function Class2()  
	{  
    	  Class10.call(this);  
    	  Class11.call(this);  
	}
	 var c=new Class2();  c.showSub(1,2)
	





