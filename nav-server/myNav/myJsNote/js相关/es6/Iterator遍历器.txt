概念： iterator是一种接口机制，为各种不同的数据结构提供统一的访问机制
  作用：
    1、为各种数据结构，提供一个统一的、简便的访问接口；
    2、使得数据结构的成员能够按某种次序排列
    3、ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。
  工作原理：
    - 创建一个指针对象，指向数据结构的起始位置。
    - 第一次调用next方法，指针自动指向数据结构的第一个成员
    - 接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员
    - 每调用next方法返回的是一个包含value和done的对象，{value: 当前成员的值,done: 布尔值}
      * value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。
      * 当遍历结束的时候返回的value值是undefined，done值为false
  原生具备iterator接口的数据(可用for of遍历)
    1、Array
    2、arguments
    3、set容器
    4、map容器
    5、String
    。。。

简单模拟实现iterator:   
  // 自定义iterator生成指针对象,就是一个闭包
  function mockIterator(arr) {
    let nextIndex = 0;
    return {
      next: function () {
        return nextIndex<arr.length?{value: arr[nextIndex++], done: false}:{value: undefined, done: true}
      }
    }
  }

  let arr = [1,2,3,4,5];
  let iteratorObj = mockIterator(arr);
  console.log(iteratorObj.next());//每执行一次next,index++,下次执行就指向下一个数据
  console.log(iteratorObj.next());
 
 从侧面了解：
  for of不能遍历obj的原因就是obj没有部署iterator接口;
  三点运算符、解构赋值其实就是调用iterator接口：
  let arr1=[1,6]; let arr2=[2,3,4,5]
  arr1=[1,...arr2,6]; //arr2调用iterator接口返回{value:2，done:false},{value:3，done:false}...
