注意async函数(源自ES2017)
  概念： 真正意义上去解决异步回调的问题，同步流程表达异步操作
  本质： Generator的语法糖
  语法：
      async function foo(){
        await 异步操作;
        await 异步操作；
      }
  特点：
    1、不需要像Generator去调用next方法，遇到await等待，当前的异步操作完成就往下执行
    2、返回的总是Promise对象，可以用then方法进行下一步操作
    3、async取代Generator函数的星号*，await取代Generator的yield
    4、语意上更为明确，使用简单，经临床验证，暂时没有任何副作用

简单示例：
  function foo(){
    return new Promise(resolve=>{//可以不传reject
      setTimeout(resolve,2000); //模拟异步操作，2秒后提示成功
    })
  }
  async function test(){
    console.log('开始执行。。');
    await foo();  //到这里先暂停，等foo()返回成功提示后，才执行下面的语句
    console.log('执行完毕');  //两秒后打印(foo两秒后才提示成功)
  }
  test();
	
await的返回值：
  let result=await foo();
  1.如果是普通函数(不是promise),就是函数return 的值
	2.如果promise对象，返回的是resolve的参数，没传就是undefined
  3.如果promise失败，reject('失败了。。'),会出错：uncaught(in promise)失败了。。

实战示例：
  async function getNews(url) {
      return new Promise((resolve, reject) => {
        $.ajax({
          url,
          type: 'GET',
          success: data =>  resolve(data),
          error: error => reject(error)
        })
      })
    }
  async function sendXml(){
    let result=await getNews('http://localhost:3000/news?id=7');
    //上一个异步结束，得到result.commentsUrl给下一句用
    let result=await getNews('http://localhost:3000'+result.commentsUrl);
  }
  sendXml();

  注意：如上sendXml里有多个await,如果其中一条出错(异步请求失败)，会抛出错误，且不会执行后面的语句
  解决：ajax错误error回调中不要用reject,改用resolve(false),然后判断返回的是false,就知道请求失败了