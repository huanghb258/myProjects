正则两大功能：匹配、验证。

查看正则逻辑网站：regexper.com



需要使用\进行转义的：
	. / \ * ? + [ ] ( ) { } ^ $ |   使用方法：如$ ==\$  直接在要转义前加个\


[]:里的内容只要任意一个符合。例：我([草槽艹|(cao)]):注意cao要括起来，不然就是c,a,o；而且还要跟文字中间加|。

^:匹配开头  	例：^abc	//整个字符串必须是abc开头

?：
	例：x?  \\x出现一次或零次
	功能2：\w(?:草)\w(cnm)  此时分组1不是‘草’而是'cnm'  ?:在()里作用就是此括号不算分组


{}：设置几位   例：\d{6，8} 必须6-8位之间的数字才符合 {6，}:表示6位以上。 {6}:只能是6位
特殊：\d{6,8} 如果出现连续12个数字，只选择前8个，而不是两个6位然后12位全选择。
注意：只要没加{}的，默认都是一次。

\d  匹配数字 等价于[0-9]
\D 匹配非数字

\w 匹配数字、字母、下划线  等价于[0-9a-zA-Z_]
\W 匹配非\w

\s 匹配空白字符 等价于[\n\r\t\v\f]
\S 匹配非\s

.匹配除回车、换行外的任何单个字符   等价于[^\n\r]

匹配出现频率：
	n?:n出现零次或一次
	n*:零次或多次
	n+:一次或多次
	n{x}:X次
	n{x,y}:X到Y次之间
	n{x,}:>=x次以上
	注意：默认只修饰前一位  例：ab? 只修饰b;如要修饰多位用()括起来

选择和分组：
	|：如a|b|c  只要符合a或b或c就行,如果a、b都符合，匹配a(带参数g,匹配a和b)
	\\的另类用法：^|wd  wd前面可以是任意字符串   例：baidu.com/s?wd=xx 
	   //^|wd可以匹配wd
	
	()：用()进行分组  每个()会自动获得分组号  

	获得分组：示例=》/^<(\w+)\s*\/?>(?:<\/\1>|)$/
		//匹配空标签  后面的\1就是匹配分组1（即\w）	
		


匹配位置：
	^:匹配开头  如^a：从a开始   注意跟上面的^相同，有两种用法
		例：^\s   只匹配开头出现的空字符
	$:匹配结尾  同上  读刀勒
	注意:^....&主要验证用， 如匹配1234那么123456也有符合的，如果^1234$则只有 1234才能通过
	\b:单词的边界  如：\bno\b   那么 not、nano就不会匹配，所以匹配单词前后都必须加\b
	\B:非\b
	


replace方法
	语法：str=str.replace(/正则/ig,"替换值");
	作用：对字符串中符合正则的内容进行替换
	例：var regexp=/javascript/ig; //定义一个正则表达式，i和g是参数

	    var data="Write Javascript should follow javaScript rules-javascript said";//一串字符串

	    var result=data.replace(regexp,"JavaScript");\\字符串用replace方法，方法引用regexp，把符合
	的内容转换为"JavaScript";

	例2：var regexp=/(red|blue|green)/ig;   //只要是red/blue/green就符合


	     var result=data.replace(regexp,"<span style='color:$1'>$1</span>");
		//把符合条件的用span包起来，颜色等于它本身，替换内容等于它本身。


		$1：表达式就一个()，所以表达式里的都属于$1，（）是分组符号，参照上面选择和分组；

	     document.write(result);//打印到页面  red/blue/green都变成了自身的颜色，而yellow没变。

	高级替换：msg=msg.replace(/我[去草]{1,2}/g,function(kwd){return kwd.length==2?"**":"***"});
	注意：替换内容是一个函数，replace每找到一个就赋值一次给kwd,即找到多少个function就会被调用多少次
	      kwd得到几个字length就等于几

match 方法
	语法：str.match(/正则/ig);获取所有匹配的关键词，没找到返回null。
	如果不加g，则只返回一个数组，包含所配到的内容、index(下标)、input(str本身)
	如果加g,则返回一个数组，包含所有配到的内容，但没有index及input

	例：s='abcda' s.match(/a/)	//["a", index: 0, input: "abcda"]
		      s.match(/a/g)
	//["a", "a"]
	
	

search方法
	语法：arr.search(/正则/i);查找arr中有没符合正则，如果返回-1，代表没找到。	     
	注意：search没有g参数，所以只能找一个，且只返回位置无法获得内容。只能用来判断有没有。


split方法
	语法：subs=str.split(/正则/);把字符串以正则切割成数组，正则部分会被去掉。
	例：str="no zuo no die"; words=str.split(/\s/);  //以空格作为切割点['no','zuo','no','die']
	注意：
	  1.如果是"",每个字得到一个组包括空格，如果不写或没匹配到，返回数组["no zuo no die"]。
	  2.对于正则里的可有可无，如reg=/o?\s/,以o加空格分割，o可有可无，返回["n", "zu", "n", "die"]
	  3.如果str下标0就匹配到了，reg=/n/,返回的数组第一个为空，["", "o zuo ", "o die"]
	  


难点：RegExp
	封装一条正则表达式，并提供正则执行验证和查找的方法的对象
	与 var reg=/正则/ig;区别，//里面的内容只是正则，不能执行，只能写死。
	var names=["明明","静静","明月"]; var reg=new RegExp(names.join("|"),"ig");
	上述可以获取动态字符串，还能执行.jojn。  (names.join("|"),"ig")=/明明|静静|明月/gi

RegExp API

.exec:检索    
	var reg=/明明/g;  arr=reg.exec(str);  //没匹配到返回null
	返回arr[0]=明明,arr["index"]=下标位置,arr[input]=整个str内容;
	注意：受g的影响，如果加g,下次会从index开始检索，相当于test的lastIndex
	      如果正则有分组，返回['正则','正则分组1'...，'index','str']
	


.test：验证	例：var reg=/^\d{6}$/;   reg.test(要验证的东西);返回boolean值。
	注：reg.lastIndex 等于上一次检索到的下标位置，如果加g再次调用会从lastIndex开始。
	如果不加g，lastIndex始终等于0

	例：reg=/[\u4e00-\u9fa5]/g	//检测是否为中文,如果不加g始终从0开始检测，且中检测一次
	    用for循环执行：reg.test('中文e'); 
	   //不加g永远返回true,加g返回true,true,false
	


创建正则：var reg=new RegExp("正则"[,"ig"]); 注意：在这里正则是用引号，不是//;

动态生成：var rec=["紫烟","明月"...];	reg=new RegExp(rec.join("|"),"g");
	注意:如果动态生成的内容再加上正则就须要转义
	例：var reg=new RegExp("^(\\s*|"+hint+")$");



/我(了个?)?去/:我去、我了去、我了个去 //true   我个去  //false


身份证号：早期15位，后期加了3位且最后一位可能是[xX]
   方法：\d{15}(\d{2}[0-9xX])?   解释：前面必须数字必须15位，(必须数字且2位，数字或x)且可有可无

手机号：+86或0086空格可有可无，最多一次。1，在3，4，5，7，8任意一个，9位数字
   方法：(\+86|0086)?\s*1[34578]\d{9}   完整匹配：^(\+86|0086)?\s*1[34578]\d{9}$

密码强度：6~8位字母，数字的组合，至少包含一位大写字母和一位数字。
   方法：1、(?![A-Za-z]+$) 如果不都由字母组成   2、(?![a-z0-9]+$)   3、[A-Za-z0-9]{6,8}
	解释：1.不能全是字母2.不能全是数字，3必须是数字加字母组成且必须是6-8位。
	?!匹配的是整个括号内容，+表示后面的都是直到$。注意严格匹配要在整个表达式前后加^$

获取Html里的所有超链接：<a\s+[^>]*href=(['""])[^'""]*\1
	解释：首先符合<a然后有个空格，中间不能出现>情况下可以出现任意字符然后会出现href=
	（'或""）中间不能出现'或""的情况下可以出现任意字符然后跟着'或""。
	注意小()和\1，()得到自动分组1,\1:匹配分组1，即()是'则是’，""则是""。
	对照：<div><a class="tm" href="http:tmooc.cn"></a></div><h1><a name="a1"></a></h1>
	现在得到的是：<a class="tm" href="http:tmooc.cn"
	只保留其中的：[^'""]内容，所以要把他括起来([^'""]),这个括号是2，注意0是整个正则表达式。







/*******自写********/

过滤所有标签：<\s*[a-zA-Z]*.*>\s*



/*****其它*******/

替换匹配到的每个分组的值：
	
	var str='abc2015xxx12ccc03日';
	str=str.replace(/(\w+)\d{4}(\w+)\d{0}(\w+)\d{2}/,function(str,$1,$2,$3){return $1+2018+$2+04+$3+04});
	\\"abc2018xxx12cc4c4日"

	说明：之前一直把要替换的内容做成分组，结果得到分组后却没办法去替换，于是想了个比较弱的方法，
	把不替换的内容都做成分组，然后拼接
	
	注意：fn里第一个参数默认是$0，所以参数str即使里面用不上也必须写上去

	方法2：match方法







